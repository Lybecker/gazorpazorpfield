# Azure DevOps build pipeline for .NET Core microservice
#
# Useful references:
# * Azure Pipelines documentation: https://docs.microsoft.com/en-us/azure/devops/pipelines/?view=azure-devops
# * Azure Pipelines predefined variables: https://docs.microsoft.com/en-us/azure/devops/pipelines/build/variables?view=azure-devops&tabs=yaml

variables:
  apiProjectName: 'CentralFiniteCurve.Gazorpazorpfield.API'
  buildConfiguration: 'Release'
  buildProjects: '**/*.csproj'
  testProjects: '**/*[Tt]ests/*.csproj'
  testLogger: 'xunit'
  testAdapterPath: '.'
  publishProjects: 'src/$(apiProjectName)/$(apiProjectName).csproj'
  publishFolder: $(Build.ArtifactStagingDirectory)
  artifactName: 'drop'
  dockerfileName: 'Dockerfile.AzureDevOps'
  dockerfilesSourceFolder: '$(Build.SourcesDirectory)/src/'
  dockerBuildContext: '$(Pipeline.Workspace)/$(artifactName)/$(apiProjectName)/'
  dockerImageName: 'CentralFiniteCurve.Gazorpazorpfield' # TODO: Review this value before use
  dockerImageTag: '$(Build.BuildId)'

  # TODO: Fill the values of the following variables before use!
  # If you choose not to build/push a Docker image, remove or comment out the BuildAndPushDockerImage job
  dockerContainerRegistryServiceConnectionName: '' # TODO: Fill the value before use
  dockerContainerRegistryRepositoryName: '' # TODO: Fill the value before use


jobs:
- job: BuildAndTestSolutionAndPublishBuildArtifacts
  displayName: 'Build and test the solution, publish build artifacts'
  steps:
  - task: UseDotNet@2
    displayName: 'Set up .NET Core 3.0'
    inputs:
      packageType: sdk
      version: 3.0.x

  - task: DotNetCoreCLI@2
    displayName: 'Restore packages'
    inputs: 
      command: 'restore'
      projects: '$(buildProjects)'
      feedsToUse: 'select'

  - task: DotNetCoreCLI@2
    displayName: 'Build projects'
    inputs: 
      command: 'build'
      projects: '$(buildProjects)'
      arguments: '--configuration $(buildConfiguration) --no-restore'

  - task: DotNetCoreCLI@2
    displayName: 'Run tests'
    inputs:
      command: 'test'
      projects: '$(testProjects)'
      arguments: '--no-build --configuration $(buildConfiguration) --logger:$(testLogger) --test-adapter-path:$(testAdapterPath)'
      publishTestResults: true

  - task: DotNetCoreCLI@2
    displayName: 'Publish'
    inputs:
      command: 'publish'
      publishWebProjects: false
      projects: '$(publishProjects)'
      arguments: '--configuration $(buildConfiguration) --no-build --output $(publishFolder)'
      zipAfterPublish: false

  - task: CopyFiles@2
    displayName: 'Copy Docker file to build artifacts'
    inputs:
      SourceFolder: '$(dockerfilesSourceFolder)'
      Contents: |
        $(dockerfileName)
        .dockerignore
      TargetFolder: '$(Build.ArtifactStagingDirectory)/$(apiProjectName)'

  - publish: '$(publishFolder)'
    displayName: 'Publish build artifacts'
    artifact: '$(artifactName)'
    condition: succeededOrFailed()

- job: BuildAndPushDockerImage
  displayName: 'Build Docker image and push to container registry'
  dependsOn: BuildAndTestSolutionAndPublishBuildArtifacts
  condition: eq(variables['Build.SourceBranch'], 'refs/heads/master') # Execute only in master branch
  steps:
  - download: current
    displayName: 'Download build artifacts'
    artifact: '$(artifactName)'
    patterns: '**/*'

  - task: Docker@2
    displayName: 'Login to container registry'
    inputs:
      containerRegistry: '$(dockerContainerRegistryServiceConnectionName)'
      command: 'login'
      addPipelineData: false

  - task: Docker@2
    displayName: 'Build Docker image and push to container registry'
    inputs:
      command: 'buildAndPush'
      repository: '$(dockerContainerRegistryRepositoryName)/$(dockerImageName)'
      dockerfile: '$(dockerBuildContext)$(dockerfileName)'
      buildContext: '$(dockerBuildContext)'
      tags: '$(dockerImageTag)'
      addPipelineData: false
